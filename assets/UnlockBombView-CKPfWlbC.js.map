{"version":3,"file":"UnlockBombView-CKPfWlbC.js","sources":["../../src/modules/speech-recognition/SpeechRecognitionApi.ts","../../src/views/UnlockBombView.vue"],"sourcesContent":["/**\n * Speech Recognition API Module\n * \n * This module handles the Web Speech API's speech recognition functionality\n * Reference: https://whatwebcando.today/speech-recognition.html\n * \n * Team 2 will work on this module to implement the \"unlock-bomb\" challenge\n */\n\n// Type definitions for the Web Speech API\nexport interface SpeechRecognitionOptions {\n  lang?: string;\n  continuous?: boolean;\n  interimResults?: boolean;\n  maxAlternatives?: number;\n}\n\nexport interface SpeechRecognitionResult {\n  transcript: string;\n  confidence: number;\n}\n\nexport interface SpeechRecognitionError {\n  error: string;\n  message: string;\n}\n\nexport class SpeechRecognitionApi {\n  private recognition: any;\n  private isListening: boolean = false;\n  private resultReceived: boolean = false;\n\n  /**\n   * Check if Speech Recognition is supported in the current browser\n   */\n  static isSupported(): boolean {\n    return !!(window.SpeechRecognition || window.webkitSpeechRecognition);\n  }\n\n  constructor(options: SpeechRecognitionOptions = {}) {\n    // Check for browser support\n    if (!SpeechRecognitionApi.isSupported()) {\n      throw new Error('Speech Recognition API is not supported in this browser');\n    }\n\n    // Initialize Speech Recognition API\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    this.recognition = new SpeechRecognition();\n\n    // Set default options\n    this.recognition.lang = options.lang || 'en-US';\n    this.recognition.continuous = options.continuous || false;\n    this.recognition.interimResults = options.interimResults || false;\n    this.recognition.maxAlternatives = options.maxAlternatives || 1;\n  }\n\n  /**\n   * Start listening for speech\n   * @returns Promise that resolves when recognition starts or rejects with an error\n   */\n  start(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.isListening) {\n        reject(new Error('Speech recognition is already running'));\n        return;\n      }\n\n      // Set up event handlers\n      this.recognition.onstart = () => {\n        this.isListening = true;\n        resolve();\n      };\n\n      this.recognition.onerror = (event: any) => {\n        reject({\n          error: event.error,\n          message: this.getErrorMessage(event.error)\n        });\n      };\n\n      // Start recognition\n      try {\n        this.recognition.start();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Stop listening for speech\n   */\n  stop(): void {\n    if (this.isListening) {\n      this.recognition.stop();\n      this.isListening = false;\n    }\n  }\n\n  /**\n   * Listen for speech and return the result\n   * @returns Promise that resolves with the recognition result or rejects with an error\n   */\n  listen(): Promise<SpeechRecognitionResult> {\n    return new Promise((resolve, reject) => {\n      // Reset the result received flag\n      this.resultReceived = false;\n      \n      // Set up result handler\n      this.recognition.onresult = (event: any) => {\n        this.resultReceived = true;\n        const result = event.results[0][0];\n        resolve({\n          transcript: result.transcript,\n          confidence: result.confidence\n        });\n      };\n\n      // Set up error handler\n      this.recognition.onerror = (event: any) => {\n        this.isListening = false;\n        reject({\n          error: event.error,\n          message: this.getErrorMessage(event.error)\n        });\n      };\n\n      // Set up end handler (in case no result was found)\n      this.recognition.onend = () => {\n        this.isListening = false;\n        // Only reject if no result was received\n        if (!this.resultReceived) {\n          reject({\n            error: 'no-speech',\n            message: 'No speech was detected'\n          });\n        }\n      };\n\n      // Start recognition if not already listening\n      if (!this.isListening) {\n        this.start().catch(reject);\n      }\n    });\n  }\n\n  /**\n   * Get the current listening state\n   * @returns boolean indicating if speech recognition is active\n   */\n  isActive(): boolean {\n    return this.isListening;\n  }\n\n  /**\n   * Compare a transcript to a target phrase\n   * @param transcript The speech recognition result transcript\n   * @param targetPhrase The phrase to compare against\n   * @param fuzzyMatch Whether to do a fuzzy match (includes) or exact match (equals)\n   * @returns boolean indicating if the transcript matches the target phrase\n   */\n  static compareTranscript(transcript: string, targetPhrase: string, fuzzyMatch: boolean = true): boolean {\n    // Normalize both strings (lowercase, remove extra spaces)\n    const normalizedTranscript = transcript.toLowerCase().trim();\n    const normalizedTarget = targetPhrase.toLowerCase().trim();\n    \n    if (fuzzyMatch) {\n      return normalizedTranscript.includes(normalizedTarget) || normalizedTarget.includes(normalizedTranscript);\n    } else {\n      return normalizedTranscript === normalizedTarget;\n    }\n  }\n\n  /**\n   * Get a user-friendly error message for speech recognition errors\n   * @param error The error code from the speech recognition API\n   * @returns A user-friendly error message\n   */\n  private getErrorMessage(error: string): string {\n    switch (error) {\n      case 'no-speech':\n        return 'No speech was detected. Please try again.';\n      case 'aborted':\n        return 'Speech recognition was aborted.';\n      case 'audio-capture':\n        return 'No microphone was found or microphone is disabled.';\n      case 'network':\n        return 'Network error occurred during speech recognition.';\n      case 'not-allowed':\n      case 'service-not-allowed':\n        return 'Microphone permission was denied. Please allow microphone access.';\n      case 'bad-grammar':\n        return 'Speech grammar error.';\n      case 'language-not-supported':\n        return 'The language specified is not supported.';\n      default:\n        return 'An unknown error occurred during speech recognition.';\n    }\n  }\n}\n\n// Add type declaration for the Web Speech API to avoid TypeScript errors\ndeclare global {\n  interface Window {\n    SpeechRecognition: any;\n    webkitSpeechRecognition: any;\n  }\n}","<script setup lang=\"ts\">\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport CountdownTimer from '../components/shared/CountdownTimer.vue';\nimport { SpeechRecognitionApi, type SpeechRecognitionResult } from '../modules/speech-recognition/SpeechRecognitionApi';\n\nconst router = useRouter();\nconst timerRef = ref<InstanceType<typeof CountdownTimer> | null>(null);\n\n// Speech Recognition API related variables\nconst isSpeechRecognitionSupported = ref(SpeechRecognitionApi.isSupported());\nconst speechRecognition = ref<SpeechRecognitionApi | null>(null);\nconst isListening = ref(false);\nconst errorMessage = ref('');\nconst recognizedText = ref('');\nconst matchFound = ref(false);\nconst attemptCount = ref(0);\n\n// Secret codes (only one works)\nconst secretCodes = [\n  'Alpha Tango Foxtrot',\n  'Bravo Echo Delta',\n  'Charlie Oscar Delta Echo',\n  'Delta Lima Tango',\n  'Echo Sierra Charlie Alpha Papa Echo'\n];\nconst correctCodeIndex = 2; // \"Charlie Oscar Delta Echo\" is the correct code\n\n// Try to initialize the speech recognition API\nfunction initializeSpeechRecognition() {\n  if (!isSpeechRecognitionSupported.value) {\n    errorMessage.value = 'Speech Recognition API is not supported in your browser';\n    return;\n  }\n\n  try {\n    speechRecognition.value = new SpeechRecognitionApi({\n      lang: 'en-US',\n      continuous: false,\n      interimResults: false\n    });\n  } catch (error) {\n    console.error('Error initializing speech recognition:', error);\n    errorMessage.value = 'Failed to initialize speech recognition';\n  }\n}\n\n// Start listening for speech\nasync function startListening() {\n  if (!speechRecognition.value) {\n    initializeSpeechRecognition(); // Initialize if not already done\n    if (!speechRecognition.value) return; // Exit if initialization failed\n  }\n  \n  // Clear any previous error messages when retrying\n  errorMessage.value = '';\n  isListening.value = true;\n  recognizedText.value = '';\n  \n  try {\n    await speechRecognition.value.start();\n    const result = await speechRecognition.value.listen();\n    handleSpeechResult(result);\n  } catch (error: any) {\n    console.error('Speech recognition error:', error);\n    errorMessage.value = error.message || 'Speech recognition failed';\n    isListening.value = false;\n  }\n}\n\n// Handle speech recognition result\nfunction handleSpeechResult(result: SpeechRecognitionResult) {\n  isListening.value = false;\n  recognizedText.value = result.transcript;\n  attemptCount.value++;\n  \n  // Check if the spoken phrase matches the correct code\n  const isCorrect = SpeechRecognitionApi.compareTranscript(\n    result.transcript, \n    secretCodes[correctCodeIndex],\n    true // Use fuzzy matching for better user experience\n  );\n  \n  if (isCorrect) {\n    matchFound.value = true;\n  }\n}\n\n// Proceed to the next challenge\nfunction proceedToNextStep() {\n  router.push('/defuse-bomb');\n}\n\n// Cleanup on component unmount\nonUnmounted(() => {\n  if (speechRecognition.value && isListening.value) {\n    speechRecognition.value.stop();\n  }\n});\n\n// Initialize on component mount\nonMounted(() => {\n  initializeSpeechRecognition();\n});\n</script>\n\n<template>\n  <div class=\"unlock-bomb-container\">\n    <h1>Step 2: Unlock the Bomb</h1>\n    \n    <div class=\"timer-container\">\n      <CountdownTimer ref=\"timerRef\" :start=\"true\" />\n    </div>\n    \n    <div v-if=\"!isSpeechRecognitionSupported\" class=\"error-message\">\n      <p>Your browser doesn't support speech recognition, which is required for this challenge.</p>\n      <p>Please try using Chrome or Edge on desktop, or Chrome on Android.</p>\n    </div>\n    \n    <div v-else-if=\"errorMessage\" class=\"error-message\">\n      <p>{{ errorMessage }}</p>\n      <button @click=\"startListening\" class=\"retry-button\">Retry</button>\n    </div>\n    \n    <div v-else class=\"challenge-container\">\n      <div class=\"instructions\">\n        <p>The bomb's control panel requires voice authentication to unlock.</p>\n        <p>You need to speak the correct code phrase from the list below:</p>\n        \n        <div class=\"code-options\">\n          <ul>\n            <li v-for=\"(code, index) in secretCodes\" :key=\"index\">{{ code }}</li>\n          </ul>\n        </div>\n        \n        <p class=\"hint\">Only one of these codes will work. Choose wisely!</p>\n      </div>\n      \n      <div class=\"speech-container\">\n        <button \n          @click=\"startListening\" \n          class=\"mic-button\" \n          :class=\"{ 'listening': isListening, 'disabled': matchFound }\"\n          :disabled=\"isListening || matchFound\"\n        >\n          {{ isListening ? 'Listening...' : 'Speak Code' }}\n        </button>\n        \n        <div v-if=\"recognizedText\" class=\"recognition-result\">\n          <p>Recognized speech:</p>\n          <div class=\"transcript\">{{ recognizedText }}</div>\n        </div>\n        \n        <div v-if=\"attemptCount > 0 && !matchFound\" class=\"attempt-feedback\">\n          <p class=\"wrong\">Incorrect code. Try again!</p>\n          <p class=\"attempts\">Attempts: {{ attemptCount }}</p>\n        </div>\n        \n        <div v-if=\"matchFound\" class=\"success-message\">\n          <p>Authentication successful! The bomb has been unlocked.</p>\n          <button @click=\"proceedToNextStep\" class=\"proceed-button\">Proceed to Defuse the Bomb</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.unlock-bomb-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  color: #e0e0e0;\n  font-family: 'Courier New', monospace;\n}\n\nh1 {\n  color: #33ff33;\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.timer-container {\n  margin-bottom: 2rem;\n}\n\n.error-message {\n  background-color: rgba(255, 0, 0, 0.3);\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 1rem;\n  text-align: center;\n}\n\n.challenge-container {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n}\n\n.instructions {\n  background-color: rgba(0, 0, 0, 0.7);\n  padding: 1.5rem;\n  border-radius: 8px;\n  text-align: center;\n}\n\n.code-options {\n  margin: 1.5rem 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 8px;\n  padding: 1rem;\n}\n\n.code-options ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n.code-options li {\n  margin: 0.7rem 0;\n  font-size: 1.1rem;\n  font-weight: bold;\n  color: #33ff33;\n  text-shadow: 0 0 5px rgba(51, 255, 51, 0.7);\n}\n\n.hint {\n  color: #ffff33;\n  font-style: italic;\n  margin-top: 1rem;\n}\n\n.speech-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1.5rem;\n}\n\n.mic-button {\n  background-color: #33ff33;\n  color: black;\n  border: none;\n  padding: 1.2rem 2rem;\n  font-size: 1.5rem;\n  font-weight: bold;\n  border-radius: 50px;\n  cursor: pointer;\n  font-family: 'Courier New', monospace;\n  transition: all 0.3s ease;\n  width: 200px;\n}\n\n.mic-button:hover:not(.disabled) {\n  transform: scale(1.05);\n  box-shadow: 0 0 15px rgba(51, 255, 51, 0.7);\n}\n\n.mic-button.listening {\n  background-color: #ff3333;\n  animation: pulse 1s infinite;\n}\n\n.mic-button.disabled {\n  background-color: #666;\n  cursor: not-allowed;\n  opacity: 0.7;\n}\n\n.recognition-result {\n  background-color: rgba(0, 0, 0, 0.7);\n  padding: 1.5rem;\n  border-radius: 8px;\n  width: 100%;\n  text-align: center;\n}\n\n.transcript {\n  font-size: 1.3rem;\n  margin-top: 0.5rem;\n  color: #ffff33;\n}\n\n.attempt-feedback {\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.wrong {\n  color: #ff3333;\n  font-weight: bold;\n}\n\n.attempts {\n  font-size: 0.9rem;\n  color: #999;\n  margin-top: 0.5rem;\n}\n\n.success-message {\n  background-color: rgba(51, 255, 51, 0.3);\n  padding: 1.5rem;\n  border-radius: 8px;\n  margin-top: 1.5rem;\n  text-align: center;\n  animation: successPulse 2s infinite;\n}\n\n.proceed-button {\n  background-color: #33ff33;\n  color: black;\n  border: none;\n  padding: 0.8rem 1.5rem;\n  font-size: 1.2rem;\n  font-weight: bold;\n  border-radius: 8px;\n  cursor: pointer;\n  margin-top: 1rem;\n  font-family: 'Courier New', monospace;\n  transition: all 0.3s ease;\n}\n\n.proceed-button:hover {\n  transform: scale(1.05);\n  box-shadow: 0 0 15px rgba(51, 255, 51, 0.7);\n}\n\n.retry-button {\n  background-color: #33ff33;\n  color: black;\n  border: none;\n  padding: 0.5rem 1.5rem;\n  font-size: 1.2rem;\n  font-weight: bold;\n  border-radius: 8px;\n  cursor: pointer;\n  margin-top: 1rem;\n  font-family: 'Courier New', monospace;\n  transition: all 0.3s ease;\n}\n\n@keyframes pulse {\n  0% { opacity: 1; }\n  50% { opacity: 0.7; }\n  100% { opacity: 1; }\n}\n\n@keyframes successPulse {\n  0% { box-shadow: 0 0 5px rgba(51, 255, 51, 0.7); }\n  50% { box-shadow: 0 0 20px rgba(51, 255, 51, 0.9); }\n  100% { box-shadow: 0 0 5px rgba(51, 255, 51, 0.7); }\n}\n</style>\n"],"names":["SpeechRecognitionApi","options","__publicField","SpeechRecognition","resolve","reject","event","error","result","transcript","targetPhrase","fuzzyMatch","normalizedTranscript","normalizedTarget","correctCodeIndex","router","useRouter","timerRef","ref","isSpeechRecognitionSupported","speechRecognition","isListening","errorMessage","recognizedText","matchFound","attemptCount","secretCodes","initializeSpeechRecognition","startListening","handleSpeechResult","proceedToNextStep","onUnmounted","onMounted"],"mappings":"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"}